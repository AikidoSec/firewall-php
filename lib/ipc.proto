syntax = "proto3";

import "google/protobuf/empty.proto";

package ipc;

option go_package = "ipc/protos;protos";

service Aikido {
  rpc OnConfig (Config) returns (google.protobuf.Empty);
  rpc OnPackages(Packages) returns (google.protobuf.Empty);
  rpc OnDomain (Domain) returns (google.protobuf.Empty);
  rpc GetRateLimitingStatus (RateLimitingInfo) returns (RateLimitingStatus);
  rpc OnRequestShutdown (RequestMetadataShutdown) returns (google.protobuf.Empty);
  rpc GetCloudConfig(CloudConfigUpdatedAt) returns (CloudConfig);
  rpc OnUser(User) returns (google.protobuf.Empty);
  rpc OnAttackDetected(AttackDetected) returns (google.protobuf.Empty);
  rpc OnMonitoredSinkStats(MonitoredSinkStats) returns (google.protobuf.Empty);
  rpc OnMiddlewareInstalled(MiddlewareInstalledInfo) returns (google.protobuf.Empty);
  rpc OnMonitoredIpMatch(MonitoredIpMatch) returns (google.protobuf.Empty);
  rpc OnMonitoredUserAgentMatch(MonitoredUserAgentMatch) returns (google.protobuf.Empty);
}

message Config {
  string platform_name = 1;
  string platform_version = 2;
  string token = 3;
  string endpoint = 4;
  string config_endpoint = 5;
  string log_level = 6;
  bool disk_logs = 7;
  bool blocking = 8;
  bool localhost_allowed_by_default = 9;
  bool collect_api_schema = 10;
}

message Packages {
  string token = 1;
  map<string, string> packages = 2;
}

message Domain {
  string token = 1;
  string domain = 2;
  uint32 port = 3;
}

message RateLimitingInfo {
  string token = 1;
  string method = 2;
  string route = 3;
  string routeParsed = 4;
  string user = 5;
  string ip = 6;
  string rateLimitGroup = 7;
}

message RequestMetadataShutdown {
  string token = 1;
  string method = 2;
  string route = 3;
  string routeParsed = 4;
  int32 statusCode = 5;
  string user = 6;
  string ip = 7;
  string rateLimitGroup = 8;
  APISpec apiSpec = 9;
  bool rateLimited = 10;
  bool isWebScanner = 11;
  bool shouldDiscoverRoute =12;
}

message MiddlewareInstalledInfo {
  string token = 1;
}

message MonitoredSinkStats {
  string token = 1;
  string sink = 2;
  string kind = 3;
  int32 attacksDetected = 4;
  int32 attacksBlocked = 5;
  int32 interceptorThrewError = 6;
  int32 withoutContext = 7;
  int32 total = 8;
  repeated int64 timings = 9;
}

message RateLimiting {
  bool enabled = 1;
}

message Endpoint {
  string method = 1;
  string route = 2;
  bool forceProtectionOff = 3;
  RateLimiting rateLimiting = 4;
  repeated string allowedIPAddresses = 5;
}

message CloudConfigUpdatedAt {
  string token = 1;
  int64 configUpdatedAt = 2;
}

message IpList {
  string key = 1;
  string description = 2;
  repeated string ips = 3;
}

message CloudConfig {
  int64 configUpdatedAt = 1;
  repeated Endpoint endpoints = 2;
  repeated string blockedUserIds = 3;
  repeated string bypassedIps = 4;
  map<string, IpList> blockedIps = 5;
  map<string, IpList> allowedIps = 6;
  string blockedUserAgents = 7;
  map<string, IpList> monitoredIps = 8;
  string monitoredUserAgents = 9;
  map<string, string> userAgentDetails = 10;
  bool block = 11;
}

message RateLimitingStatus {
  bool block = 1;
  string trigger = 2;
}

message User {
  string token = 1;
  string id = 2;
  string username = 3;
  string ip = 4;
}

message Header {
  string key = 1;
  string value = 2;
}

message Request {
  string method = 1;
  string ipAddress = 2;
  string userAgent = 3;
  string url = 4;
  repeated Header headers = 5;
  string body = 6;
  string source = 7;
  string route = 8;
}

message Metadata {
  string key = 1;
  string value = 2;
}

message Attack {
  string kind = 1;
  string operation = 2;
  string module = 3;
  bool blocked = 4;
  string source = 5;
  string path = 6;
  string stack = 7;
  string payload = 8;
  repeated Metadata metadata = 9;
  string userId = 10;
}

message AttackDetected {
  string token = 1;
  Request request = 2;
  Attack attack = 3;
}

message APIAuthType {
	string type = 1;
	string scheme = 2;
	string in = 3;
	string name = 4;
	string bearerFormat = 5;
}

message DataSchema {
  repeated string type = 1;
  map<string, DataSchema> properties = 2;
  DataSchema items = 3;
  bool optional = 4;
}

message APIBodyInfo {
  string type = 1;
  DataSchema schema = 2;
}

message APISpec {
  APIBodyInfo body = 1;
  DataSchema query = 2;
  repeated APIAuthType auth = 3;
}

message MonitoredIpMatch {
  string token = 1;
  repeated string lists = 2;
}

message MonitoredUserAgentMatch {
  string token = 1;
  repeated string lists = 2;
}