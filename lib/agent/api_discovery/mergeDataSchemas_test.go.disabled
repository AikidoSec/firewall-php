package api_discovery

import (
	. "main/aikido_types"
	"main/utils"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMergeDataSchemas(t *testing.T) {
	assert := assert.New(t)

	// Example 1
	schema1 := GetDataSchema(map[string]interface{}{"test": "abc"}, 0)
	schema2 := GetDataSchema(map[string]interface{}{"test2": "abc"}, 0)
	expected1 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type:     "string",
				Optional: utils.BoolPointer(true),
			},
			"test2": {
				Type:     "string",
				Optional: utils.BoolPointer(true),
			},
		},
	}
	assert.Equal(expected1, mergeDataSchemas(schema1, schema2))

	// Example 2
	schema3 := GetDataSchema(map[string]interface{}{"test": "abc", "x": map[string]interface{}{"a": 1}}, 0)
	schema4 := GetDataSchema(map[string]interface{}{"test": "abc", "x": map[string]interface{}{"b": 2}}, 0)
	expected2 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: "string",
			},
			"x": {
				Type: "object",
				Properties: map[string]*DataSchema{
					"a": {
						Type:     "number",
						Optional: utils.BoolPointer(true),
					},
					"b": {
						Type:     "number",
						Optional: utils.BoolPointer(true),
					},
				},
			},
		},
	}
	assert.Equal(expected2, mergeDataSchemas(schema3, schema4))

	// Example 3
	schema5 := GetDataSchema(map[string]interface{}{"test": "abc", "x": map[string]interface{}{"a": 1}, "arr": []int{1, 2}}, 0)
	schema6 := GetDataSchema(map[string]interface{}{"test": "abc", "x": map[string]interface{}{"a": 1, "b": 2}, "arr": []int{1, 2, 3}}, 0)
	expected3 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: "string",
			},
			"x": {
				Type: "object",
				Properties: map[string]*DataSchema{
					"a": {
						Type: "number",
					},
					"b": {
						Type:     "number",
						Optional: utils.BoolPointer(true),
					},
				},
			},
			"arr": {
				Type: "array",
				Items: &DataSchema{
					Type: "number",
				},
			},
		},
	}
	assert.Equal(expected3, mergeDataSchemas(schema5, schema6))
}

func TestPreferNonNullType(t *testing.T) {
	assert := assert.New(t)

	schema1 := GetDataSchema(map[string]interface{}{"test": "abc"}, 0)
	schema2 := GetDataSchema(map[string]interface{}{}, 0)
	expected1 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: "string",
			},
		},
	}
	assert.Equal(expected1, mergeDataSchemas(schema1, schema2))

	expected2 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: "string",
			},
		},
	}
	assert.Equal(expected2, mergeDataSchemas(schema2, schema1))
}

func TestEmptyArray(t *testing.T) {
	assert := assert.New(t)

	schema1 := GetDataSchema([]interface{}{}, 0)
	expected := &DataSchema{
		Type:  "array",
		Items: nil,
	}
	assert.Equal(expected, mergeDataSchemas(schema1, schema1))
}

func TestMergeTypes(t *testing.T) {
	assert := assert.New(t)

	// Example 1
	schema1 := GetDataSchema("str", 0)
	schema2 := GetDataSchema(15, 0)
	expected := &DataSchema{
		Type: []string{"string", "number"},
	}
	assert.Equal(expected, mergeDataSchemas(schema1, schema2))

	// Example 2: Cannot merge object with primitive type
	schema3 := GetDataSchema(map[string]interface{}{"test": "abc"}, 0)
	schema4 := GetDataSchema(15, 0)
	expected2 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: "string",
			},
		},
	}
	assert.Equal(expected2, mergeDataSchemas(schema3, schema4))

	// Example 3: Merge string and boolean types
	schema5 := GetDataSchema(map[string]interface{}{"test": "abc"}, 0)
	schema6 := GetDataSchema(map[string]interface{}{"test": true}, 0)
	expected3 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: []string{"string", "boolean"},
			},
		},
	}
	assert.Equal(expected3, mergeDataSchemas(schema5, schema6))

	// Additional nested merges
	assert.Equal(expected3, mergeDataSchemas(schema5, mergeDataSchemas(schema5, schema6)))

	expected4 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: []string{"boolean", "string"},
			},
		},
	}
	assert.Equal(expected4, mergeDataSchemas(mergeDataSchemas(GetDataSchema(map[string]interface{}{"test": true}, 0), GetDataSchema(map[string]interface{}{"test": "test"}, 0)), GetDataSchema(map[string]interface{}{"test": "abc"}, 0)))

	expected5 := &DataSchema{
		Type: "object",
		Properties: map[string]*DataSchema{
			"test": {
				Type: []string{"string", "number", "boolean"},
			},
		},
	}
	assert.Equal(expected5, mergeDataSchemas(schema5, mergeDataSchemas(GetDataSchema(map[string]interface{}{"test": 123}, 0), GetDataSchema(map[string]interface{}{"test": true}, 0))))
}
