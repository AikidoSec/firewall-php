# syntax=docker/dockerfile:1.7
FROM ubuntu:24.04

ARG PHP_VERSION=8.2
ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC

# Base OS + tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      tzdata ca-certificates curl git gnupg lsb-release software-properties-common \
      python3 python3-pip python3-flask python3-pandas python3-psutil python3-requests \
      nginx apache2 mariadb-server && \
    ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata


RUN add-apt-repository -y ppa:ondrej/php && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
      php${PHP_VERSION} \
      php${PHP_VERSION}-fpm \
      php${PHP_VERSION}-curl \
      php${PHP_VERSION}-sqlite3 \
      php${PHP_VERSION}-mysqli \
      php${PHP_VERSION}-mysql \
      php${PHP_VERSION}-mbstring \
      php${PHP_VERSION}-xml \
      php${PHP_VERSION}-zip \
      php${PHP_VERSION}-cgi \
      libapache2-mod-php${PHP_VERSION} \
      libapache2-mod-fcgid \
      libfcgi-bin

# Clean apt caches
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Nginx default fastcgi config for php-fpm
RUN mkdir -p /etc/nginx/snippets && \
    printf '%s\n' \
      'fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;' \
      'include fastcgi_params;' \
    > /etc/nginx/snippets/fastcgi-php.conf && \
    printf '%s\n' \
      'server {' \
      '  listen 80 default_server;' \
      '  root /var/www/html;' \
      '  index index.php index.html;' \
      '  location / { try_files $uri /index.php$is_args$args; }' \
      '  location ~ \.php$ {' \
      '    include snippets/fastcgi-php.conf;' \
      "    fastcgi_pass unix:/run/php/php${PHP_VERSION}-fpm.sock;" \
      '  }' \
      '}' \
    > /etc/nginx/sites-available/default

# Apache: prefer prefork + mod_php for compatibility (disable event/worker)
RUN a2dismod mpm_event || true && a2dismod mpm_worker || true && \
    a2enmod mpm_prefork rewrite && \
    a2enmod php${PHP_VERSION}

# Helper scripts used inside the CI job
# 1) init-mysql: start mysqld and prep a test DB and root password (matches your job)
# 2) select-php-apache: disable other PHP mods and enable the requested version
COPY <<'BASH' /usr/local/bin/init-mysql
#!/usr/bin/env bash
set -euo pipefail
mkdir -p /var/lib/mysql /run/mysqld
chown -R mysql:mysql /var/lib/mysql /run/mysqld
# Initialize DB if missing
if [ ! -d /var/lib/mysql/mysql ]; then
  mysqld --initialize-insecure --user=mysql --datadir=/var/lib/mysql
fi
# Start mysqld in background for setup
mysqld --user=mysql --datadir=/var/lib/mysql --socket=/run/mysqld/mysqld.sock &
MYSQL_PID=$!
# wait for socket
for i in {1..30}; do
  mysqladmin ping --silent && break || sleep 1
done
# Create db and set root password like your workflow
mysql -u root -e "CREATE DATABASE IF NOT EXISTS db;"
mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'pwd'; FLUSH PRIVILEGES;"
wait $MYSQL_PID || true
BASH
RUN chmod +x /usr/local/bin/init-mysql

COPY <<'BASH' /usr/local/bin/select-php-apache
#!/usr/bin/env bash
set -euo pipefail
PHPV="${1:-${PHP_VERSION}}"
# Disable any other php modules if present
for v in 7.2 7.3 7.4 8.0 8.1 8.2 8.3 8.4; do
  if a2query -m "php${v}" >/dev/null 2>&1; then
    a2dismod "php${v}" || true
  fi
done
a2enmod "php${PHPV}" || true
php -v
BASH
RUN chmod +x /usr/local/bin/select-php-apache

# Default workdir where your repo will be checked out
WORKDIR /workspace

# No long-running service by default; CI steps will start what they need.
CMD ["bash", "-lc", "php -v && nginx -v && apache2 -v && mysqld --version"]
