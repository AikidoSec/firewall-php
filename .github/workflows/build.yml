name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:

jobs:
  build_agent:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler protobuf-compiler-grpc

    - name: GO setup
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Get Aikido version
      run: |
        AIKIDO_VERSION=$(grep '# define PHP_AIKIDO_VERSION' include/php_aikido.h | awk -F'"' '{print $2}')
        echo $AIKIDO_VERSION
        echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
        echo "AIKIDO_AGENT_ARTIFACT=aikido_agent_$AIKIDO_VERSION" >> $GITHUB_ENV
        echo "AIKIDO_REQUEST_PROCESSOR_ARTIFACT=aikido_request_processor_$AIKIDO_VERSION" >> $GITHUB_ENV

    - name: Build Aikido agent
      run: |
        cd lib
        protoc --go_out=agent --go-grpc_out=agent ipc.proto
        cd agent
        go get main/ipc/protos
        go get google.golang.org/grpc
        go build -gcflags "all=-N -l" -buildmode=c-shared -o ../../build/$AIKIDO_AGENT_ARTIFACT.so

    - name: Build Aikido agent
      run: |
        cd lib
        protoc --go_out=request-processor --go-grpc_out=request-processor ipc.proto
        cd request-processor
        go get main/ipc/protos
        go get google.golang.org/grpc
        go build -gcflags "all=-N -l" -buildmode=c-shared -o ../../build/$AIKIDO_REQUEST_PROCESSOR_ARTIFACT.so

    - name: Archive agent 
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: $AIKIDO_AGENT_ARTIFACT
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/build/$AIKIDO_AGENT_ARTIFACT.so

    - name: Archive request processor
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: $AIKIDO_REQUEST_PROCESSOR_ARTIFACT
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/build/$AIKIDO_REQUEST_PROCESSOR_ARTIFACT.so

  build_php_extension:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.3', '7.4', '8.0', '8.1', '8.2', '8.3', '8.4']
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf bison re2c libxml2-dev libssl-dev libcurl4-gnutls-dev protobuf-compiler protobuf-compiler-grpc

    - name: GO setup
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Set PATH env
      run: |
        echo $PATH
        whereis go
        whereis protoc-gen-go

    - name: Get Aikido version
      run: |
        AIKIDO_VERSION=$(grep '# define PHP_AIKIDO_VERSION' include/php_aikido.h | awk -F'"' '{print $2}')
        echo $AIKIDO_VERSION
        echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
        echo "AIKIDO_ARTIFACT=aikido-$AIKIDO_VERSION-extension-php-${{ matrix.php_version }}" >> $GITHUB_ENV

    - name: Setup PHP
      uses: AikidoSec/setup-php@v2
      with:
        php-version: ${{ matrix.php_version }}
        extensions: :curl
        coverage: none

    - name: Check PHP setup
      run: |
        which php
        php -v
        php -i

    - name: Build extension
      run: |
        cd ${{ github.workspace }}
        rm -rf build
        mkdir build
        cd libphp-extension
        phpize
        cd ..
        cd agent
        go get google.golang.org/grpc
        go build -gcflags "all=-N -l" -buildmode=c-shared  -o ../../build/aikido_agent.so
        cd ../request-processor
        go get google.golang.org/grpc
        go build -gcflags "all=-N -l" -buildmode=c-shared  -o ../../build/aikido_request_processor.so
        cd ../../build
        CXX=g++ CXXFLAGS="-fPIC -std=c++20 -g -O0 -I../include" LDFLAGS="-lstdc++" ../lib/php-extension/configure
        make
        sudo make install

    - name: Run tests
      run: |
        cd ${{ github.workspace }}
        export TEST_PHP_EXECUTABLE=/usr/bin/php
        /usr/bin/php libphp-extension/run-tests.php ./tests
      continue-on-error: true

    - name: Version Aikido extension
      run: |
        cd ${{ github.workspace }}/build/modules
        mv aikido.so ${{ env.AIKIDO_ARTIFACT }}.so
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ env.AIKIDO_ARTIFACT }}
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/build/modules/${{ env.AIKIDO_ARTIFACT }}.so
          ${{ github.workspace }}/tests/*.diff



  build_rpm_package:
    runs-on: ubuntu-latest
    container:
      image: centos:latest
    needs: [ build_agent, build_php_extension ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rpmdevtools
        run: |
          cd /etc/yum.repos.d/
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
          yum -y install epel-release
          yum -y install rpmdevtools

      - name: Get Aikido version
        run: |
          AIKIDO_VERSION=$(grep '# define PHP_AIKIDO_VERSION' include/php_aikido.h | awk -F'"' '{print $2}')
          echo $AIKIDO_VERSION
          echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            aikido-${{ env.AIKIDO_VERSION }}*
      - name: List Artifacts
        run: |
          ls -l -R
          pwd
      - name: Prepare rpm package
        run: |
          mv aikido-${{ env.AIKIDO_VERSION }}/aikido-${{ env.AIKIDO_VERSION }} package/rpm/opt/aikido/
          chmod 711 package/rpm/opt/aikido/aikido-${{ env.AIKIDO_VERSION }} 
          mv aikido-${{ env.AIKIDO_VERSION }}*/build/modules/aikido-${{ env.AIKIDO_VERSION }}* package/rpm/opt/aikido/
          rpmdev-setuptree
          mkdir -p ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}
          cp -rf package/rpm/etc ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}/
          cp -rf package/rpm/opt ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}/
          cp -f package/rpm/aikido.spec ~/rpmbuild/SPECS/

      - name: Setup RPM for prod
        run: |
          echo "AIKIDO_ARTIFACT=aikido-php-firewall-$AIKIDO_VERSION-1.x86_64.rpm" >> $GITHUB_ENV
          rm -f ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}/opt/aikido/aikido-dev.ini
          rm -f ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}/opt/aikido/config-dev.json
          sed -i "s/aikido-dev.ini/aikido.ini/" ~/rpmbuild/SPECS/aikido.spec

      - name: Build rpm package
        run: |
          cd ~/rpmbuild/SOURCES
          tar czvf ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}.tar.gz *
          rm -rf ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}
          rpmbuild --define "debug_package %{nil}" -ba ~/rpmbuild/SPECS/aikido.spec
      
      - name: Archive rpm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.AIKIDO_ARTIFACT }}
          if-no-files-found: error
          path: |
            ~/rpmbuild/RPMS/x86_64/${{ env.AIKIDO_ARTIFACT }}