name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:

jobs:
  build_libs:
    runs-on: ${{ matrix.os }}
    container:
      image: ubuntu:22.04
    strategy:
      matrix:
        os: [ ubuntu-24.04 ]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Get Arch
      run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y software-properties-common
        add-apt-repository ppa:longsleep/golang-backports
        apt-get update
        apt-get install -y golang-go protobuf-compiler protobuf-compiler-grpc

    - name: GO setup
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Get Aikido version
      run: |
        AIKIDO_VERSION=$(grep '#define PHP_AIKIDO_VERSION' lib/php-extension/include/php_aikido.h | awk -F'"' '{print $2}')
        echo $AIKIDO_VERSION
        echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
        echo "AIKIDO_INTERNALS_REPO=https://api.github.com/repos/AikidoSec/zen-internals" >> $GITHUB_ENV

    - name: Build Aikido Agent
      run: |
        cd lib
        protoc --go_out=agent --go-grpc_out=agent ipc.proto
        cd agent
        go get main/ipc/protos
        go get google.golang.org/grpc
        go get github.com/stretchr/testify/assert
        go test ./...
        go build -ldflags "-s -w" -o ../../build/aikido-agent
        ls -l ../../build

    - name: Build Aikido Request Processor
      run: |
        cd lib
        protoc --go_out=request-processor --go-grpc_out=request-processor ipc.proto
        cd request-processor
        go mod tidy
        go get google.golang.org/grpc
        go get github.com/stretchr/testify/assert
        go get main/ipc/protos
        go test ./...
        go build -ldflags "-s -w" -buildmode=c-shared -o ../../build/aikido-request-processor.so
        ls -l ../../build

    - name: Archive agent 
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
      if: always()
      with:
        name: aikido-agent-${{ env.ARCH }}
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/build/aikido-agent

    - name: Archive request processor
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: aikido-request-processor-${{ env.ARCH }}
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/build/aikido-request-processor.so

  build_php_extension:
    runs-on: ${{ matrix.os }}
    container: ubuntu:22.04
    strategy:
      matrix:
        php_version: ['7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3', '8.4']
        os: [ ubuntu-24.04 ]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        DEBIAN_FRONTEND=noninteractive apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
        ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
        echo "Etc/UTC" > /etc/timezone
        DEBIAN_FRONTEND=noninteractive dpkg-reconfigure -f noninteractive tzdata
        apt-get install -y autoconf bison re2c libxml2-dev libssl-dev libcurl4-gnutls-dev

    - name: Get Arch
      run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

    - name: Get Aikido version
      run: |
        AIKIDO_VERSION=$(grep '#define PHP_AIKIDO_VERSION' lib/php-extension/include/php_aikido.h | awk -F'"' '{print $2}')
        echo $AIKIDO_VERSION
        echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
        echo "AIKIDO_ARTIFACT=aikido-extension-php-${{ matrix.php_version }}" >> $GITHUB_ENV

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php_version }}
        extensions: curl
        coverage: none

    - name: Check PHP setup
      run: |
        which php
        php -v
        php -i

    - name: Build extension
      run: |
        rm -rf build
        mkdir build
        cd lib/php-extension
        phpize
        cd ../../build
        CXX=g++ CXXFLAGS="-fPIC -O2 -I../lib/php-extension/include" LDFLAGS="-lstdc++" ../lib/php-extension/configure
        make

    - name: Version Aikido extension
      run: |
        cd ./build/modules
        mv aikido.so ${{ env.AIKIDO_ARTIFACT }}.so
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ env.AIKIDO_ARTIFACT }}-${{ env.ARCH }}
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/build/modules/${{ env.AIKIDO_ARTIFACT }}.so
          ${{ github.workspace }}/tests/*.diff

  build_rpm:
    runs-on: ${{ matrix.os }}
    container:
      image: centos:8
    strategy:
      matrix:
        os: ['ubuntu-24.04']
      fail-fast: false
    needs: [ build_libs, build_php_extension ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rpmdevtools
        run: |
          cd /etc/yum.repos.d/
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
          yum -y install epel-release
          yum -y install rpmdevtools
          yum -y install jq

      - name: Get Arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Get Aikido version
        run: |
          AIKIDO_VERSION=$(grep '#define PHP_AIKIDO_VERSION' lib/php-extension/include/php_aikido.h | awk -F'"' '{print $2}')
          echo $AIKIDO_VERSION
          echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
          echo "AIKIDO_LIBZEN=libzen_internals_${{ env.ARCH }}-unknown-linux-gnu.so" >> $GITHUB_ENV
          echo "AIKIDO_LIBZEN_VERSION=0.1.37" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: |
            aikido-extension-php-*-${{ env.ARCH }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            aikido-agent-${{ env.ARCH }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            aikido-request-processor-${{ env.ARCH }}

      - name: Download Aikido Zen Internals Lib
        run: |
          curl -L -O https://github.com/AikidoSec/zen-internals/releases/download/v${{ env.AIKIDO_LIBZEN_VERSION }}/${{ env.AIKIDO_LIBZEN }}

      - name: Prepare rpm package
        run: |
          mv aikido-agent-${{ env.ARCH }}/aikido-agent package/rpm/opt/aikido/aikido-agent
          mv aikido-request-processor-${{ env.ARCH }}/aikido-request-processor.so package/rpm/opt/aikido/aikido-request-processor.so
          mv ${{ env.AIKIDO_LIBZEN }} package/rpm/opt/aikido/${{ env.AIKIDO_LIBZEN }}
          ls -lR aikido-extension-php-*
          mv aikido-extension-php-*/__w/firewall-php/firewall-php/build/modules/aikido-extension-php-* package/rpm/opt/aikido/
          mv package/rpm/opt/aikido package/rpm/opt/aikido-${{ env.AIKIDO_VERSION }}
          chmod 777 package/rpm/opt/aikido-${{ env.AIKIDO_VERSION }}/*
          rpmdev-setuptree
          mkdir -p ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}
          cp -rf package/rpm/opt ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}/
          cp -f package/rpm/aikido.spec ~/rpmbuild/SPECS/

      - name: Setup RPM for prod
        run: |
          echo "AIKIDO_ARTIFACT=aikido-php-firewall-$AIKIDO_VERSION-1.${{ env.ARCH }}.rpm" >> $GITHUB_ENV
          echo "AIKIDO_ARTIFACT_RELEASE=aikido-php-firewall.${{ env.ARCH }}.rpm" >> $GITHUB_ENV
          sed -i "s/aikido.so/aikido-${{ env.AIKIDO_VERSION }}.so/" ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}/opt/aikido-${{ env.AIKIDO_VERSION }}/aikido.ini

      - name: Build rpm package
        run: |
          cd ~/rpmbuild/SOURCES
          tar czvf ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}.tar.gz *
          rm -rf ~/rpmbuild/SOURCES/aikido-php-firewall-${{ env.AIKIDO_VERSION }}
          rpmbuild -ba ~/rpmbuild/SPECS/aikido.spec
          ls -l ~/rpmbuild/RPMS/${{ env.ARCH }}/
          mv ~/rpmbuild/RPMS/${{ env.ARCH }}/${{ env.AIKIDO_ARTIFACT }} ~/rpmbuild/RPMS/${{ env.ARCH }}/${{ env.AIKIDO_ARTIFACT_RELEASE }}

      - name: Check rpm dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          yum deplist ~/rpmbuild/RPMS/${{ env.ARCH }}/${{ env.AIKIDO_ARTIFACT_RELEASE }} | grep -E "GLIBC_2.32|GLIBC_2.34|GLIBCXX_3.4.29" && exit 1 || exit 0
      
      - name: Archive rpm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.AIKIDO_ARTIFACT_RELEASE }}
          if-no-files-found: error
          path: |
            ~/rpmbuild/RPMS/${{ env.ARCH }}/${{ env.AIKIDO_ARTIFACT_RELEASE }}

  build_deb:
    runs-on: ${{ matrix.os }}
    container:
      image: ubuntu:22.04
    strategy:
      matrix:
        os: [ ubuntu-24.04 ]
      fail-fast: false
    needs: [ build_rpm ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Get deb arch
        run: |
          if [ "${{ env.ARCH }}" = "x86_64" ]; then
            echo "DEB_ARCH=amd64" >> $GITHUB_ENV
          elif [ "$ARCH" = "aarch64" ]; then
            echo "DEB_ARCH=arm64" >> $GITHUB_ENV
          else
            echo "DEB_ARCH=${{ env.ARCH }}" >> $GITHUB_ENV
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            aikido-php-firewall.${{ env.ARCH }}.rpm

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
          ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
          echo "Etc/UTC" > /etc/timezone
          DEBIAN_FRONTEND=noninteractive dpkg-reconfigure -f noninteractive tzdata
          apt-get install -y alien

      - name: Get Aikido version
        run: |
          AIKIDO_VERSION=$(grep '#define PHP_AIKIDO_VERSION' lib/php-extension/include/php_aikido.h | awk -F'"' '{print $2}')
          echo $AIKIDO_VERSION
          echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
          echo "AIKIDO_RPM=aikido-php-firewall.${{ env.ARCH }}.rpm" >> $GITHUB_ENV
          echo "AIKIDO_ARTIFACT=aikido-php-firewall.${{ env.ARCH }}.deb" >> $GITHUB_ENV    
      
      - name: Build deb
        run: |
          alien --to-deb --scripts --keep-version ${{ env.AIKIDO_RPM }}/${{ env.AIKIDO_RPM }}
          mv aikido-php-firewall_${{ env.AIKIDO_VERSION }}-1_${{ env.DEB_ARCH }}.deb temp-${{ env.AIKIDO_ARTIFACT }}
          
          # Package contents into deb with gzip compression (because default zstd compression is not supported by older versions of dpkg)
          mkdir deb-temp
          dpkg-deb -R temp-${{ env.AIKIDO_ARTIFACT }} deb-temp/
          dpkg-deb -Zgzip -b deb-temp ${{ env.AIKIDO_ARTIFACT }}
          rm -rf deb-temp
  
      - name: Archive deb package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.AIKIDO_ARTIFACT }}
          if-no-files-found: error
          path: |
            ${{ env.AIKIDO_ARTIFACT }}

  test_php_centos:
    runs-on: ${{ matrix.os }}
    container:
      image: centos:8
    needs: [ build_rpm ]
    strategy:
      matrix:
        php_version: ['7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3', '8.4']
        server: ['nginx-php-fpm', 'apache-mod-php', 'php-built-in']
        os: ['ubuntu-24.04']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        run: |
          uname -a
          cat /etc/centos-release
          cd /etc/yum.repos.d/
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
          yum install -y yum-utils
          yum install -y https://rpms.remirepo.net/enterprise/remi-release-8.4.rpm
          yum install -y gcc
          yum install -y python3-devel
          pip3 install flask
          pip3 install requests
          pip3 install psutil
          yum install -y httpd
          dnf --assumeyes module reset php
          dnf --assumeyes --nogpgcheck module install php:remi-${{ matrix.php_version }}
          dnf --assumeyes install php-pdo
          yum install -y mod_php
          yum install -y nginx
          yum install -y php-fpm

      - name: Get Arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Check PHP setup
        run: |
          uname -m
          php -v
          php -i

      - name: Get Aikido version
        run: |
          AIKIDO_VERSION=$(grep '#define PHP_AIKIDO_VERSION' lib/php-extension/include/php_aikido.h | awk -F'"' '{print $2}')
          echo $AIKIDO_VERSION
          echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
          echo "AIKIDO_RPM=aikido-php-firewall.${{ env.ARCH }}.rpm" >> $GITHUB_ENV
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            ${{ env.AIKIDO_RPM }}

      - name: Install RPM
        run: |
          rpm -Uvh --oldpackage ${{ env.AIKIDO_RPM }}/${{ env.AIKIDO_RPM }}

      - name: Run CLI tests
        run: |
          export TEST_PHP_EXECUTABLE=/usr/bin/php
          php lib/php-extension/run-tests.php ./tests/cli

      - name: Run ${{ matrix.server }} server tests
        run: |
          cd tools
          python3 run_server_tests.py ../tests/server ../tests/testlib --server=${{ matrix.server }}

  test_php_ubuntu:
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
    needs: [ build_deb ]
    strategy:
      matrix:
        container: ['ubuntu:24.04']
        os: ['ubuntu-24.04']
        php_version: ['7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3', '8.4']
        server: ['nginx-php-fpm', 'apache-mod-php', 'php-built-in']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Set env
        run: |
          AIKIDO_VERSION=$(grep '#define PHP_AIKIDO_VERSION' lib/php-extension/include/php_aikido.h | awk -F'"' '{print $2}')
          echo $AIKIDO_VERSION
          echo "AIKIDO_VERSION=$AIKIDO_VERSION" >> $GITHUB_ENV
          echo "AIKIDO_DEB=aikido-php-firewall.${{ env.ARCH }}.deb" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            ${{ env.AIKIDO_DEB }}

      - name: Setup nginx & php-fpm
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
          ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
          echo "Etc/UTC" > /etc/timezone
          DEBIAN_FRONTEND=noninteractive dpkg-reconfigure -f noninteractive tzdata
          apt-get install -y nginx php-fpm

      - name: Setup Apache (mod_php)
        run: |
          apt-get install -y apache2
          a2dismod mpm_event
          a2dismod mpm_worker
          a2enmod mpm_prefork
          a2enmod rewrite

      - name: Setup PHP
        uses: shivammathur/setup-php@vmore-verbose
        with:
          php-version: ${{ matrix.php_version }}
          extensions: curl, sqlite3
          coverage: none

      - name: Check PHP setup
        run: |
          php_versions="php7.3 php7.4 php8.0 php8.1 php8.2 php8.3"
          for version in $php_versions; do
              if a2query -m "$version" > /dev/null 2>&1; then
                  echo "Disabling $version..."
                  a2dismod "$version"
              else
                  echo "$version is not installed."
              fi
          done
          DEBIAN_FRONTEND=noninteractive apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
          ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
          echo "Etc/UTC" > /etc/timezone
          DEBIAN_FRONTEND=noninteractive dpkg-reconfigure -f noninteractive tzdata
          apt-get install -y libapache2-mod-php${{ matrix.php_version }}
          a2enmod php${{ matrix.php_version }}
          php -i

      - name: Setup Python
        run: |
          apt-get install -y python3 python3-flask python3-pandas python3-psutil python3-requests

      - name: Install DEB
        run: |
          dpkg -i -E ${{ env.AIKIDO_DEB }}/${{ env.AIKIDO_DEB }}

      - name: Run CLI tests
        if: matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          php lib/php-extension/run-tests.php ./tests/cli

      - name: Run ${{ matrix.server }} server tests
        run: |
          cd tools
          python3 run_server_tests.py ../tests/server ../tests/testlib --server=${{ matrix.server }}

      - name: Archive test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-aikido-${{ env.AIKIDO_VERSION }}-${{ matrix.os }}-php-${{ matrix.php_version }}
          if-no-files-found: ignore
          path: |
            ${{ github.workspace }}/tests/cli/**/*.diff